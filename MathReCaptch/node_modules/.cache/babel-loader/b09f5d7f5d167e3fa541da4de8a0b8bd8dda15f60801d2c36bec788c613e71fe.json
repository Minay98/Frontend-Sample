{"ast":null,"code":"var _jsxFileName = \"E:\\\\sample\\\\captchajs\\\\src\\\\components\\\\CaptchaForm\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { createCanvas } from \"canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MathCaptcha = () => {\n  _s();\n  const [captchaImage, setCaptchaImage] = useState(null);\n  const [captchaAnswer, setCaptchaAnswer] = useState(null);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n\n  // Generate random numbers and operation\n  const generateCaptcha = () => {\n    const num1 = Math.floor(Math.random() * 10); // First number\n    const num2 = Math.floor(Math.random() * 10); // Second number\n    const operations = [\"+\", \"-\", \"*\"];\n    const operation = operations[Math.floor(Math.random() * operations.length)]; // Random operation\n    let answer;\n    switch (operation) {\n      case \"+\":\n        answer = num1 + num2;\n        break;\n      case \"-\":\n        answer = num1 - num2;\n        break;\n      case \"*\":\n        answer = num1 * num2;\n        break;\n      default:\n        answer = 0;\n    }\n    setCaptchaAnswer(answer);\n    return {\n      num1,\n      num2,\n      operation\n    };\n  };\n\n  // Create captcha image\n  const createCaptchaImage = ({\n    num1,\n    num2,\n    operation\n  }) => {\n    const canvas = createCanvas(200, 70);\n    const ctx = canvas.getContext(\"2d\");\n    // Background\n    ctx.fillStyle = \"#f3f3f3\";\n    ctx.fillRect(0, 0, 200, 70);\n\n    // Captcha text\n    ctx.font = \"30px bold Arial\";\n    ctx.fillStyle = \"#333\";\n    ctx.fillText(`${num1} ${operation} ${num2} = ?`, 40, 45);\n\n    // Add noise (random lines)\n    for (let i = 0; i < 5; i++) {\n      ctx.strokeStyle = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.5)`;\n      ctx.beginPath();\n      ctx.moveTo(Math.random() * 200, Math.random() * 70);\n      ctx.lineTo(Math.random() * 200, Math.random() * 70);\n      ctx.stroke();\n    }\n\n    // Add noise (random dots)\n    for (let i = 0; i < 50; i++) {\n      ctx.fillStyle = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.5)`;\n      ctx.beginPath();\n      ctx.arc(Math.random() * 200, Math.random() * 70, Math.random() * 2, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Convert canvas to URL\n    const dataURL = canvas.toDataURL();\n    return dataURL;\n  };\n\n  // When the page loads or captcha is refreshed\n  useEffect(() => {\n    const captcha = generateCaptcha();\n    const image = createCaptchaImage(captcha);\n    setCaptchaImage(image);\n  }, []);\n\n  // Validate user's answer\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (parseInt(userAnswer, 10) === captchaAnswer) {\n      alert(\"Correct answer!\");\n    } else {\n      alert(\"Incorrect answer. Please try again.\");\n    }\n  };\n\n  // Refresh the captcha\n  const refreshCaptcha = () => {\n    const captcha = generateCaptcha();\n    const image = createCaptchaImage(captcha);\n    setCaptchaImage(image);\n    setUserAnswer(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \" \",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"flex gap-4\",\n      children: [captchaImage && /*#__PURE__*/_jsxDEV(Image, {\n        width: 150,\n        height: 50,\n        src: captchaImage,\n        alt: \"captcha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: refreshCaptcha,\n        type: \"button\",\n        children: /*#__PURE__*/_jsxDEV(Image, {\n          src: \"/icons/refresh.svg\",\n          width: 20,\n          height: 20,\n          className: \"size-[30px]\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"flex justify-between gap-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userAnswer,\n        onChange: e => handleOnChange(e),\n        placeholder: \"\\u067E\\u0627\\u0633\\u062E \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\",\n        required: true,\n        className: \"p-[3px] text-base border rounded-md  mt-4 text-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(MathCaptcha, \"xTTooGjdwckkd6jNF40wm7NKCJw=\");\n_c = MathCaptcha;\nexport default MathCaptcha;\nvar _c;\n$RefreshReg$(_c, \"MathCaptcha\");","map":{"version":3,"names":["React","useState","useEffect","createCanvas","jsxDEV","_jsxDEV","MathCaptcha","_s","captchaImage","setCaptchaImage","captchaAnswer","setCaptchaAnswer","userAnswer","setUserAnswer","generateCaptcha","num1","Math","floor","random","num2","operations","operation","length","answer","createCaptchaImage","canvas","ctx","getContext","fillStyle","fillRect","font","fillText","i","strokeStyle","beginPath","moveTo","lineTo","stroke","arc","PI","fill","dataURL","toDataURL","captcha","image","handleSubmit","e","preventDefault","parseInt","alert","refreshCaptcha","className","children","Image","width","height","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","handleOnChange","placeholder","required","_c","$RefreshReg$"],"sources":["E:/sample/captchajs/src/components/CaptchaForm/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { createCanvas } from \"canvas\";\r\n\r\nconst MathCaptcha = () => {\r\n  const [captchaImage, setCaptchaImage] = useState(null);\r\n  const [captchaAnswer, setCaptchaAnswer] = useState(null);\r\n  const [userAnswer, setUserAnswer] = useState(\"\");\r\n\r\n  // Generate random numbers and operation\r\n  const generateCaptcha = () => {\r\n    const num1 = Math.floor(Math.random() * 10); // First number\r\n    const num2 = Math.floor(Math.random() * 10); // Second number\r\n    const operations = [\"+\", \"-\", \"*\"];\r\n    const operation = operations[Math.floor(Math.random() * operations.length)]; // Random operation\r\n    let answer;\r\n\r\n    switch (operation) {\r\n      case \"+\":\r\n        answer = num1 + num2;\r\n        break;\r\n      case \"-\":\r\n        answer = num1 - num2;\r\n        break;\r\n      case \"*\":\r\n        answer = num1 * num2;\r\n        break;\r\n      default:\r\n        answer = 0;\r\n    }\r\n\r\n    setCaptchaAnswer(answer);\r\n    return { num1, num2, operation };\r\n  };\r\n\r\n  // Create captcha image\r\n  const createCaptchaImage = ({ num1, num2, operation }) => {\r\n    const canvas = createCanvas(200, 70);\r\n    const ctx = canvas.getContext(\"2d\");\r\n    // Background\r\n    ctx.fillStyle = \"#f3f3f3\";\r\n    ctx.fillRect(0, 0, 200, 70);\r\n\r\n    // Captcha text\r\n    ctx.font = \"30px bold Arial\";\r\n    ctx.fillStyle = \"#333\";\r\n    ctx.fillText(`${num1} ${operation} ${num2} = ?`, 40, 45);\r\n\r\n    // Add noise (random lines)\r\n    for (let i = 0; i < 5; i++) {\r\n      ctx.strokeStyle = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.5)`;\r\n      ctx.beginPath();\r\n      ctx.moveTo(Math.random() * 200, Math.random() * 70);\r\n      ctx.lineTo(Math.random() * 200, Math.random() * 70);\r\n      ctx.stroke();\r\n    }\r\n\r\n    // Add noise (random dots)\r\n    for (let i = 0; i < 50; i++) {\r\n      ctx.fillStyle = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.5)`;\r\n      ctx.beginPath();\r\n      ctx.arc(Math.random() * 200, Math.random() * 70, Math.random() * 2, 0, Math.PI * 2);\r\n      ctx.fill();\r\n    }\r\n\r\n    // Convert canvas to URL\r\n    const dataURL = canvas.toDataURL();\r\n    return dataURL;\r\n  };\r\n\r\n  // When the page loads or captcha is refreshed\r\n  useEffect(() => {\r\n    const captcha = generateCaptcha();\r\n    const image = createCaptchaImage(captcha);\r\n    setCaptchaImage(image);\r\n  }, []);\r\n\r\n  // Validate user's answer\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (parseInt(userAnswer, 10) === captchaAnswer) {\r\n      alert(\"Correct answer!\");\r\n    } else {\r\n      alert(\"Incorrect answer. Please try again.\");\r\n    }\r\n  };\r\n\r\n  // Refresh the captcha\r\n  const refreshCaptcha = () => {\r\n    const captcha = generateCaptcha();\r\n    const image = createCaptchaImage(captcha);\r\n    setCaptchaImage(image);\r\n    setUserAnswer(\"\");\r\n  };\r\n\r\n  return (\r\n    <section className=\" \">\r\n    <section className=\"flex gap-4\">\r\n      {captchaImage && (\r\n        <Image width={150} height={50} src={captchaImage} alt=\"captcha\" />\r\n      )}\r\n      <button\r\n        onClick={refreshCaptcha}\r\n        type=\"button\"\r\n        \r\n      >\r\n        <Image src={\"/icons/refresh.svg\"} width={20} height={20} className=\"size-[30px]\" alt=\"\"/>\r\n      </button>\r\n    </section>\r\n    <form className=\"flex justify-between gap-4\">\r\n      <input\r\n        type=\"text\"\r\n        value={userAnswer}\r\n        onChange={(e) => handleOnChange(e)}\r\n        placeholder=\"پاسخ را وارد کنید\"\r\n        required\r\n        className=\"p-[3px] text-base border rounded-md  mt-4 text-right\"\r\n      />\r\n    </form>\r\n  </section>\r\n  );\r\n};\r\n\r\nexport default MathCaptcha;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}